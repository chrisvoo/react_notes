{"ast":null,"code":"import _defineProperty from \"/home/ccastelli/Documents/experiments/react_notes/sports_store/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ActionTypes } from './Types';\n/**\n * Actions are processed by data store reducers, which are functions that receive the current\n * contents of the data store and an action object and use them to make changes.\n * Reducers are required to create and return new objects that incorporate any required changes.\n * If the action type isn’t recognized, the reducer must return the data store object it received\n * unchanged.\n */\n\nexport default ((storeData, action) => {\n  switch (action.type) {\n    case ActionTypes.DATA_LOAD:\n      /* it creates a new object with all the properties of the\n       * old store plus the new data received in the action */\n      return _objectSpread({}, storeData, {\n        [action.payload.dataType]: action.payload.data,\n        [\"\".concat(action.payload.dataType, \"_total\")]: action.payload.total,\n        [\"\".concat(action.payload.dataType, \"_params\")]: action.payload.params\n      });\n\n    case ActionTypes.DATA_SET_PAGESIZE:\n      return _objectSpread({}, storeData, {\n        pageSize: action.payload\n      });\n\n    case ActionTypes.DATA_SET_SORT_PROPERTY:\n      return _objectSpread({}, storeData, {\n        sortKey: action.payload\n      });\n\n    default:\n      return storeData || {};\n  }\n});","map":{"version":3,"sources":["/home/ccastelli/Documents/experiments/react_notes/sports_store/src/data/ShopReducer.js"],"names":["ActionTypes","storeData","action","type","DATA_LOAD","payload","dataType","data","total","params","DATA_SET_PAGESIZE","pageSize","DATA_SET_SORT_PROPERTY","sortKey"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,SAA5B;AAEA;;;;;;;;AAOA,gBAAe,CAACC,SAAD,EAAYC,MAAZ,KAAuB;AACpC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKH,WAAW,CAACI,SAAjB;AACE;;AAEA,+BACKH,SADL;AAEE,SAACC,MAAM,CAACG,OAAP,CAAeC,QAAhB,GAA2BJ,MAAM,CAACG,OAAP,CAAeE,IAF5C;AAGE,mBAAIL,MAAM,CAACG,OAAP,CAAeC,QAAnB,cAAsCJ,MAAM,CAACG,OAAP,CAAeG,KAHvD;AAIE,mBAAIN,MAAM,CAACG,OAAP,CAAeC,QAAnB,eAAuCJ,MAAM,CAACG,OAAP,CAAeI;AAJxD;;AAMF,SAAKT,WAAW,CAACU,iBAAjB;AACE,+BAAYT,SAAZ;AAAuBU,QAAAA,QAAQ,EAAET,MAAM,CAACG;AAAxC;;AACF,SAAKL,WAAW,CAACY,sBAAjB;AACE,+BAAYX,SAAZ;AAAuBY,QAAAA,OAAO,EAAEX,MAAM,CAACG;AAAvC;;AACF;AACE,aAAOJ,SAAS,IAAI,EAApB;AAfJ;AAiBD,CAlBD","sourcesContent":["import { ActionTypes } from './Types';\n\n/**\n * Actions are processed by data store reducers, which are functions that receive the current\n * contents of the data store and an action object and use them to make changes.\n * Reducers are required to create and return new objects that incorporate any required changes.\n * If the action type isn’t recognized, the reducer must return the data store object it received\n * unchanged.\n */\nexport default (storeData, action) => {\n  switch (action.type) {\n    case ActionTypes.DATA_LOAD:\n      /* it creates a new object with all the properties of the\n       * old store plus the new data received in the action */\n      return {\n        ...storeData,\n        [action.payload.dataType]: action.payload.data,\n        [`${action.payload.dataType}_total`]: action.payload.total,\n        [`${action.payload.dataType}_params`]: action.payload.params,\n      };\n    case ActionTypes.DATA_SET_PAGESIZE:\n      return { ...storeData, pageSize: action.payload };\n    case ActionTypes.DATA_SET_SORT_PROPERTY:\n      return { ...storeData, sortKey: action.payload };\n    default:\n      return storeData || {};\n  }\n};\n"]},"metadata":{},"sourceType":"module"}