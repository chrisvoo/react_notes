{"ast":null,"code":"import _defineProperty from \"/home/ccastelli/Documents/experiments/react_notes/sports_store/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ActionTypes } from '../Types';\n\nconst CartReducer = (storeData, action) => {\n  /* It is important to keep the structure of your data store flat because changes deep in an object hierarchy\n   * won’t be detected and displayed to the user. It is for this reason that the cart , cartItems , and cartPrice\n   * properties are defined alongside the products and categories properties in the data store, rather than\n   * grouped together into a single structure. */\n  const newStore = _objectSpread({\n    cart: [],\n    cartItems: 0,\n    cartPrice: 0\n  }, storeData);\n\n  switch (action.type) {\n    case ActionTypes.CART_ADD:\n      {\n        const _action$payload = action.payload,\n              p = _action$payload.product,\n              q = _action$payload.quantity;\n        const existing = newStore.cart.find(item => item.product.id === p.id);\n\n        if (existing) {\n          existing.quantity += q;\n        } else {\n          newStore.cart = [...newStore.cart, action.payload];\n        }\n\n        newStore.cartItems += q;\n        newStore.cartPrice += p.price * q;\n        return newStore;\n      }\n\n    case ActionTypes.CART_UPDATE:\n      {\n        newStore.cart = newStore.cart.map(item => {\n          if (item.product.id === action.payload.product.id) {\n            const diff = action.payload.quantity - item.quantity;\n            newStore.cartItems += diff;\n            newStore.cartPrice += item.product.price * diff;\n            return action.payload;\n          }\n\n          return item;\n        });\n        return newStore;\n      }\n\n    case ActionTypes.CART_REMOVE:\n      {\n        const selection = newStore.cart.find(item => item.product.id === action.payload.id);\n        newStore.cartItems -= selection.quantity;\n        newStore.cartPrice -= selection.quantity * selection.product.price;\n        newStore.cart = newStore.cart.filter(item => item !== selection);\n        return newStore;\n      }\n\n    case ActionTypes.CART_CLEAR:\n      return _objectSpread({}, storeData, {\n        cart: [],\n        cartItems: 0,\n        cartPrice: 0\n      });\n\n    default:\n      return storeData || {};\n  }\n};\n\nexport default CartReducer;","map":{"version":3,"sources":["/home/ccastelli/Documents/experiments/react_notes/sports_store/src/data/reducers/CartReducer.js"],"names":["ActionTypes","CartReducer","storeData","action","newStore","cart","cartItems","cartPrice","type","CART_ADD","payload","p","product","q","quantity","existing","find","item","id","price","CART_UPDATE","map","diff","CART_REMOVE","selection","filter","CART_CLEAR"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,UAA5B;;AAEA,MAAMC,WAAW,GAAG,CAACC,SAAD,EAAYC,MAAZ,KAAuB;AACzC;;;;AAIA,QAAMC,QAAQ;AACZC,IAAAA,IAAI,EAAE,EADM;AACFC,IAAAA,SAAS,EAAE,CADT;AACYC,IAAAA,SAAS,EAAE;AADvB,KAC6BL,SAD7B,CAAd;;AAIA,UAAQC,MAAM,CAACK,IAAf;AACE,SAAKR,WAAW,CAACS,QAAjB;AAA2B;AAAA,gCACWN,MAAM,CAACO,OADlB;AAAA,cACRC,CADQ,mBACjBC,OADiB;AAAA,cACKC,CADL,mBACLC,QADK;AAEzB,cAAMC,QAAQ,GAAGX,QAAQ,CAACC,IAAT,CAAcW,IAAd,CAAoBC,IAAD,IAAUA,IAAI,CAACL,OAAL,CAAaM,EAAb,KAAoBP,CAAC,CAACO,EAAnD,CAAjB;;AAEA,YAAIH,QAAJ,EAAc;AACZA,UAAAA,QAAQ,CAACD,QAAT,IAAqBD,CAArB;AACD,SAFD,MAEO;AACLT,UAAAA,QAAQ,CAACC,IAAT,GAAgB,CAAC,GAAGD,QAAQ,CAACC,IAAb,EAAmBF,MAAM,CAACO,OAA1B,CAAhB;AACD;;AACDN,QAAAA,QAAQ,CAACE,SAAT,IAAsBO,CAAtB;AACAT,QAAAA,QAAQ,CAACG,SAAT,IAAsBI,CAAC,CAACQ,KAAF,GAAUN,CAAhC;AACA,eAAOT,QAAP;AACD;;AACD,SAAKJ,WAAW,CAACoB,WAAjB;AAA8B;AAC5BhB,QAAAA,QAAQ,CAACC,IAAT,GAAgBD,QAAQ,CAACC,IAAT,CAAcgB,GAAd,CAAmBJ,IAAD,IAAU;AAC1C,cAAIA,IAAI,CAACL,OAAL,CAAaM,EAAb,KAAoBf,MAAM,CAACO,OAAP,CAAeE,OAAf,CAAuBM,EAA/C,EAAmD;AACjD,kBAAMI,IAAI,GAAGnB,MAAM,CAACO,OAAP,CAAeI,QAAf,GAA0BG,IAAI,CAACH,QAA5C;AACAV,YAAAA,QAAQ,CAACE,SAAT,IAAsBgB,IAAtB;AACAlB,YAAAA,QAAQ,CAACG,SAAT,IAAuBU,IAAI,CAACL,OAAL,CAAaO,KAAb,GAAqBG,IAA5C;AACA,mBAAOnB,MAAM,CAACO,OAAd;AACD;;AAED,iBAAOO,IAAP;AACD,SATe,CAAhB;AAUA,eAAOb,QAAP;AACD;;AACD,SAAKJ,WAAW,CAACuB,WAAjB;AAA8B;AAC5B,cAAMC,SAAS,GAAGpB,QAAQ,CAACC,IAAT,CAAcW,IAAd,CAAoBC,IAAD,IAAUA,IAAI,CAACL,OAAL,CAAaM,EAAb,KAAoBf,MAAM,CAACO,OAAP,CAAeQ,EAAhE,CAAlB;AACAd,QAAAA,QAAQ,CAACE,SAAT,IAAsBkB,SAAS,CAACV,QAAhC;AACAV,QAAAA,QAAQ,CAACG,SAAT,IAAsBiB,SAAS,CAACV,QAAV,GAAqBU,SAAS,CAACZ,OAAV,CAAkBO,KAA7D;AACAf,QAAAA,QAAQ,CAACC,IAAT,GAAgBD,QAAQ,CAACC,IAAT,CAAcoB,MAAd,CAAsBR,IAAD,IAAUA,IAAI,KAAKO,SAAxC,CAAhB;AACA,eAAOpB,QAAP;AACD;;AACD,SAAKJ,WAAW,CAAC0B,UAAjB;AACE,+BACKxB,SADL;AACgBG,QAAAA,IAAI,EAAE,EADtB;AAC0BC,QAAAA,SAAS,EAAE,CADrC;AACwCC,QAAAA,SAAS,EAAE;AADnD;;AAGF;AACE,aAAOL,SAAS,IAAI,EAApB;AAvCJ;AAyCD,CAlDD;;AAoDA,eAAeD,WAAf","sourcesContent":["import { ActionTypes } from '../Types';\n\nconst CartReducer = (storeData, action) => {\n  /* It is important to keep the structure of your data store flat because changes deep in an object hierarchy\n   * won’t be detected and displayed to the user. It is for this reason that the cart , cartItems , and cartPrice\n   * properties are defined alongside the products and categories properties in the data store, rather than\n   * grouped together into a single structure. */\n  const newStore = {\n    cart: [], cartItems: 0, cartPrice: 0, ...storeData,\n  };\n\n  switch (action.type) {\n    case ActionTypes.CART_ADD: {\n      const { product: p, quantity: q } = action.payload;\n      const existing = newStore.cart.find((item) => item.product.id === p.id);\n\n      if (existing) {\n        existing.quantity += q;\n      } else {\n        newStore.cart = [...newStore.cart, action.payload];\n      }\n      newStore.cartItems += q;\n      newStore.cartPrice += p.price * q;\n      return newStore;\n    }\n    case ActionTypes.CART_UPDATE: {\n      newStore.cart = newStore.cart.map((item) => {\n        if (item.product.id === action.payload.product.id) {\n          const diff = action.payload.quantity - item.quantity;\n          newStore.cartItems += diff;\n          newStore.cartPrice += (item.product.price * diff);\n          return action.payload;\n        }\n\n        return item;\n      });\n      return newStore;\n    }\n    case ActionTypes.CART_REMOVE: {\n      const selection = newStore.cart.find((item) => item.product.id === action.payload.id);\n      newStore.cartItems -= selection.quantity;\n      newStore.cartPrice -= selection.quantity * selection.product.price;\n      newStore.cart = newStore.cart.filter((item) => item !== selection);\n      return newStore;\n    }\n    case ActionTypes.CART_CLEAR:\n      return {\n        ...storeData, cart: [], cartItems: 0, cartPrice: 0,\n      };\n    default:\n      return storeData || {};\n  }\n};\n\nexport default CartReducer;\n"]},"metadata":{},"sourceType":"module"}