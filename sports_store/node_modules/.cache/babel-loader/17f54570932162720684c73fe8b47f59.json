{"ast":null,"code":"import _defineProperty from \"/home/ccastelli/Documents/experiments/react_notes/sports_store/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst isPromise = payload => (typeof payload === \"object\" || typeof payload === \"function\") && typeof payload.then === \"function\";\n/**\n * Redux data stores can be extended to support asynchronous operations using a middleware function,\n * which inspects the actions that are sent to the data store and alters them before they are processed.\n * Here the middleware will wait until the Promise is resolved and then pass on the action using the outcome\n * of the Promise as the payload. */\n\n\nexport const asyncActions = () => next => action => {\n  if (isPromise(action.payload)) {\n    action.payload.then(result => next(_objectSpread({}, action, {\n      payload: result\n    })));\n  } else {\n    next(action);\n  }\n};","map":{"version":3,"sources":["/home/ccastelli/Documents/experiments/react_notes/sports_store/src/data/AsyncMiddleware.js"],"names":["isPromise","payload","then","asyncActions","next","action","result"],"mappings":";;;;;;AAAA,MAAMA,SAAS,GAAIC,OAAD,IACd,CAAC,OAAOA,OAAP,KAAoB,QAApB,IAAgC,OAAOA,OAAP,KAAoB,UAArD,KACO,OAAOA,OAAO,CAACC,IAAf,KAAyB,UAFpC;AAIA;;;;;;;AAKA,OAAO,MAAMC,YAAY,GAAG,MAAOC,IAAD,IAAWC,MAAD,IAAY;AACpD,MAAIL,SAAS,CAACK,MAAM,CAACJ,OAAR,CAAb,EAA+B;AAC3BI,IAAAA,MAAM,CAACJ,OAAP,CAAeC,IAAf,CAAoBI,MAAM,IAAIF,IAAI,mBAAKC,MAAL;AAAaJ,MAAAA,OAAO,EAAEK;AAAtB,OAAlC;AACH,GAFD,MAEO;AACHF,IAAAA,IAAI,CAACC,MAAD,CAAJ;AACH;AACJ,CANM","sourcesContent":["const isPromise = (payload) =>\n    (typeof(payload) === \"object\" || typeof(payload) === \"function\")\n        && typeof(payload.then) === \"function\";\n\n/**\n * Redux data stores can be extended to support asynchronous operations using a middleware function,\n * which inspects the actions that are sent to the data store and alters them before they are processed.\n * Here the middleware will wait until the Promise is resolved and then pass on the action using the outcome\n * of the Promise as the payload. */        \nexport const asyncActions = () => (next) => (action) => {\n    if (isPromise(action.payload)) {\n        action.payload.then(result => next({...action, payload: result}));\n    } else {\n        next(action)\n    }\n}"]},"metadata":{},"sourceType":"module"}